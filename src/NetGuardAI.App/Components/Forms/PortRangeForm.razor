@inherits BlazorComponentBase
@using NetGuardAI.Core.Persistence
@using NetGuardAI.Core.Persistence.Entities
@using Microsoft.EntityFrameworkCore

<MudPaper Class="p-6">
    @if (_portRanges is null)
    {
        <div class="w-full h-4 p-16 mx-auto">
            <MudProgressLinear Indeterminate="true"/>
        </div>
    }
    else
    {
        <MudForm @ref="_form" @bind-IsValid="@_success">
            <MudContainer Class="flex flex-col gap-4">
                <MudButton OnClick="OnAdd" StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Variant="Variant.Outlined">
                    Adicionar Porta
                </MudButton>
                @if (_portRanges.Count == 0)
                {
                    <MudText Class="align-self">Nenhuma porta alvo cadastrada...</MudText>
                }
                else
                {
                    foreach (var portRange in _portRanges)
                    {
                        <PortRangeEntry PortRange="portRange" OnDelete="OnDelete"/>
                    }
                }

                <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" Disabled="@(!_success || _isLoading)" OnClick="SaveChanges">
                   @if (_isLoading)
                   {
                       <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                   }
                   Salvar
                </MudButton>
            </MudContainer>
        </MudForm>
    }
</MudPaper>

@code {
    private bool _isLoading;
    private List<PortRange>? _portRanges;
    private List<PortRange> _rangesToDelete = new();
    private List<PortRange> _rangesToAdd = new();
    private MudForm? _form;
    private bool _success;

    [InjectScoped]
    public AppDbContext Context { get; set; } = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        _portRanges = await Context.PortRanges.ToListAsync();
        StateHasChanged();
    }

    private void OnDelete(PortRange target)
    {
        if (_portRanges!.Contains(target))
            _rangesToDelete.Add(target);
        
        _portRanges.Remove(target);
        StateHasChanged();
    }

    private void OnAdd()
    {
        var target = new PortRange { FromPort = 0 };
        _portRanges?.Add(target);
        _rangesToAdd.Add(target);
    }

    private async Task SaveChanges()
    {
        _isLoading = true;
        StateHasChanged();
        
        foreach (var target in _rangesToDelete)
        {
            Context.PortRanges.Remove(target);
        }
        
        foreach (var target in _rangesToAdd)
        {
            Context.PortRanges.Add(target);
        }
        
        await Context.SaveChangesAsync();
        _portRanges = await Context.PortRanges.ToListAsync();
        
        _rangesToAdd.Clear();
        _rangesToDelete.Clear();
        _isLoading = false;
        
        StateHasChanged();
    }

}